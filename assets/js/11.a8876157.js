(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{334:function(e,n,_){"use strict";_.r(n);var t=_(33),v=Object(t.a)({},(function(){var e=this,n=e.$createElement,_=e._self._c||n;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("OAuth 是什么？\n解决了什么问题？\n如何解决问题的？")]),e._v(" "),_("p",[e._v("互联网上有很多应用，每个应用有很多用户，很多应用的用户可能是交叉重合的，\n比如，用户A有github的账号，现在想登录网站B,可不可以用github上的用户信息登录呢？")]),e._v(" "),_("p",[e._v("比较简单粗暴的方法是：网站B获取用户A在github的账号密码，但是有一些问题。")]),e._v(" "),_("p",[e._v("安全：\n1.网站B需要保存用户A的账号明文，有泄露的风险\n2.如果用户A的github账号修改，网站B也要跟着修改")]),e._v(" "),_("p",[e._v("权限:\n1.网站B得到用户A的github账号就可以进行所有操作，不能限制权限的范围\n2.如果用户A不想授权给网站B了，如何在不改账号的情况下撤销网站B的权限。")]),e._v(" "),_("p",[e._v("OAuth（开放认证协议）就是为了解决这两个问题的。")]),e._v(" "),_("p",[e._v("解决方案：\n1.将角色和资源分离；\n2.通过授权获取资源；")]),e._v(" "),_("p",[e._v("角色划分为4种：(以上面的例子说明)\n1.资源服务器（github服务器）\n2.授权服务器（github服务器）\n3.资源所有者（用户A）\n4.客户端（网站B）")]),e._v(" "),_("p",[e._v("授权模式分为四种：\n1.授权码模式（Authorization Code）\n2.简化模式（隐式模式）(Implicit)\n3.密码模式（Resource Owner Password Credentials）\n4.客户端模式（Client Credentials）")]),e._v(" "),_("p",[e._v("授权码模式：\n拼接链接，获取"),_("code",[e._v("code")]),e._v(",通过"),_("code",[e._v("code")]),e._v("获取"),_("code",[e._v("access_token")]),e._v("(可能附带"),_("code",[e._v("refresh_token")]),e._v(")，用"),_("code",[e._v("access_token")]),e._v("去获取用户信息，\n"),_("code",[e._v("access_token")]),e._v("一般有过期时间，可以通过"),_("code",[e._v("refresh_token")]),e._v("刷新"),_("code",[e._v("access_token")])]),e._v(" "),_("p",[e._v("简化模式：\n拼接链接，直接获取"),_("code",[e._v("access_token")])])])}),[],!1,null,null,null);n.default=v.exports}}]);