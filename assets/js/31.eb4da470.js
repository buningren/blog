(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{352:function(t,a,v){"use strict";v.r(a);var e=v(33),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"canvas"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#canvas"}},[t._v("#")]),t._v(" Canvas")]),t._v(" "),v("p",[t._v("canvas元素用于生成图像，它本身像一个画布，JavaScript通过操作它的API，\n在上面生成图像。他的底层是一个个像素，相当于一个可以用JavaScript操作的位图（bitmap）。")]),t._v(" "),v("p",[t._v("它和svg就是好像位图和矢量图。")]),t._v(" "),v("p",[v("strong",[t._v("如何使用？")])]),t._v(" "),v("p",[t._v("首先要创建一个"),v("code",[t._v("<canvas>")]),t._v("元素，每个canvas都对应有一个CanvasRenderingContext2D对象。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('// html\n<canvas id="canvas" height="500px" width="400px"></canvas>\n\n// js\nvar canvas = document.getElementById(\'canvas\');\nvar ctx = canvas.getContext(\'2d\');\n\nctx instanceof CanvasRenderingContext2D  // true\n')])])]),v("p",[v("strong",[t._v("按照用途：Canvas API可以用于：绘制图形和图像处理")])]),t._v(" "),v("h2",{attrs:{id:"canvas-api-绘制图形"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#canvas-api-绘制图形"}},[t._v("#")]),t._v(" Canvas API 绘制图形")]),t._v(" "),v("ul",[v("li",[t._v("线段")]),t._v(" "),v("li",[t._v("矩形")]),t._v(" "),v("li",[t._v("弧线")]),t._v(" "),v("li",[t._v("文本")]),t._v(" "),v("li",[t._v("渐变色和图像填充")])]),t._v(" "),v("p",[t._v("Canvas画布提供了一个作图的平面空间，该空间的每一个点都有自己的坐标。\n原点(0，0)位于画布左上角，x轴的正向是原点向右，y轴的正向是原点向下。")]),t._v(" "),v("h3",{attrs:{id:"路径"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#路径"}},[t._v("#")]),t._v(" 路径")]),t._v(" "),v("ul",[v("li",[t._v("ctx.beginPath()      开始绘制路径")]),t._v(" "),v("li",[t._v("ctx.closePath()      结束路径，返回起始坐标并绘制一条直线")]),t._v(" "),v("li",[t._v("ctx.moveTo()         设置路径的起点")]),t._v(" "),v("li",[t._v("ctx.lineTo()         路径从当前坐标连接到指定的坐标")]),t._v(" "),v("li",[t._v("ctx.fill()           路径内部填充")]),t._v(" "),v("li",[t._v("ctx.fillStyle()      路径填充的颜色和样式，默认黑色")]),t._v(" "),v("li",[t._v("ctx.stroke()         路径线条着色")]),t._v(" "),v("li",[t._v("ctx.strokeStyle()    路径线条的颜色和样式，默认黑色")])]),t._v(" "),v("h3",{attrs:{id:"线型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线型"}},[t._v("#")]),t._v(" 线型")]),t._v(" "),v("ul",[v("li",[t._v("ctx.lineWidth        线条宽度，默认1.0")]),t._v(" "),v("li",[t._v("ctx.lineCap          线条末端的样式，可能的值（butt 矩形、round 圆型、square 矩形）")]),t._v(" "),v("li",[t._v("ctx.lineJoin         线段交点的样式，可能的值（round 扇形、bevel 三角形、miter 菱形）")]),t._v(" "),v("li",[t._v("ctx.miterLimit       指定菱形交点的长度，默认10")]),t._v(" "),v("li",[t._v("ctx.getLineDash()    数组，返回虚线的线段和间距的长度")]),t._v(" "),v("li",[t._v("ctx.setLineDash()    数组，指定虚线的线段和间距的长度")])]),t._v(" "),v("h3",{attrs:{id:"矩形"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#矩形"}},[t._v("#")]),t._v(" 矩形")]),t._v(" "),v("ul",[v("li",[t._v("ctx.rect()           绘制矩形，x1，y1，x2，y2")]),t._v(" "),v("li",[t._v("ctx.fillRect()       填充一个矩形，x1，y1，x2，y2")]),t._v(" "),v("li",[t._v("ctx.strokeRect()     绘制一个矩形边框，x1，y1，x2，y2")]),t._v(" "),v("li",[t._v("ctx.clearRect()      擦除一个矩形区域，x1，y1，x2，y2")])]),t._v(" "),v("h3",{attrs:{id:"弧线"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#弧线"}},[t._v("#")]),t._v(" 弧线")]),t._v(" "),v("ul",[v("li",[t._v("ctx.arc()            x， y， radius， startAngle， endAngle， anticlockwise: boolean [ true逆时针 | false顺时针 ]")]),t._v(" "),v("li",[t._v("ctx.arcTo()          x1， y1， x2， y2， radius")])]),t._v(" "),v("h2",{attrs:{id:"文本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文本"}},[t._v("#")]),t._v(" 文本")]),t._v(" "),v("ul",[v("li",[t._v("ctx.fillText()          实心文本，string， x1， y1， width")]),t._v(" "),v("li",[t._v("ctx.strokeText()        空心文本，string， x1， y1， width")]),t._v(" "),v("li",[t._v("ctx.measureText()       string， 返回一个TextMetrics对象， 可以从该对象获取参数字符串的信息， 目前主要是文本渲染后的宽度"),v("code",[t._v("width")])]),t._v(" "),v("li",[t._v("ctx.font                同CSS的font属性")]),t._v(" "),v("li",[t._v("ctx.textAlign           文本对齐， left， right， center， start， end")]),t._v(" "),v("li",[t._v("ctx.direction           文本方向， 默认inheried， ltr， rtl")]),t._v(" "),v("li",[t._v("ctx.textBaseline        文本垂直对齐，top， hanging， middle， alphabetic， ideographic， bottom")])]),t._v(" "),v("h3",{attrs:{id:"渐变色和图像填充"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渐变色和图像填充"}},[t._v("#")]),t._v(" 渐变色和图像填充")]),t._v(" "),v("ul",[v("li",[t._v("ctx.createLinearGradient()       x1， y1， x2， y2")]),t._v(" "),v("li",[t._v("ctx.createRadialGradient()       x1， y1， r1， x2， y2， r2")]),t._v(" "),v("li",[t._v("ctx.createPattern()              img， [ repeat | repeat-x | repeat-y | no-repeat ]")]),t._v(" "),v("li",[t._v("gradient.addColorStop()          index， color")])]),t._v(" "),v("h3",{attrs:{id:"阴影"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阴影"}},[t._v("#")]),t._v(" 阴影")]),t._v(" "),v("ul",[v("li",[t._v("ctx.shadowBlur             模糊程度，默认0")]),t._v(" "),v("li",[t._v("ctx.shadowColor            颜色， 默认black")]),t._v(" "),v("li",[t._v("ctx.shadowOffsetX          水平位移，0")]),t._v(" "),v("li",[t._v("ctx.shadowOffsetY          垂直尾翼，0")])]),t._v(" "),v("h2",{attrs:{id:"canvas-api-图像处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#canvas-api-图像处理"}},[t._v("#")]),t._v(" Canvas API 图像处理")]),t._v(" "),v("h3",{attrs:{id:"绘制图像"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#绘制图像"}},[t._v("#")]),t._v(" 绘制图像")]),t._v(" "),v("ul",[v("li",[t._v("ctx.drawImage(image, dx, dy)")]),t._v(" "),v("li",[t._v("ctx.drawImage(image, dx, dy, dwidth, dheight)")]),t._v(" "),v("li",[t._v("ctx.drawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight)")])]),t._v(" "),v("h3",{attrs:{id:"像素读写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#像素读写"}},[t._v("#")]),t._v(" 像素读写")]),t._v(" "),v("ul",[v("li",[t._v("ctx.getImageData()          返回ImageData 对象：{data, width, height}")]),t._v(" "),v("li",[t._v("ctx.putImageData()")]),t._v(" "),v("li",[t._v("ctx.createImageData()")])]),t._v(" "),v("h3",{attrs:{id:"图像变换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#图像变换"}},[t._v("#")]),t._v(" 图像变换")]),t._v(" "),v("ul",[v("li",[t._v("ctx.rotate()            旋转")]),t._v(" "),v("li",[t._v("ctx.scale()             缩放")]),t._v(" "),v("li",[t._v("ctx.translate()         平移")]),t._v(" "),v("li",[t._v("ctx.transform()         变换")]),t._v(" "),v("li",[t._v("ctx.setTransform()      取消变换")])]),t._v(" "),v("h3",{attrs:{id:"其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),v("ul",[v("li",[t._v("ctx.save()           保存当前上下文")]),t._v(" "),v("li",[t._v("ctx.restore()        返回上一次上下文")]),t._v(" "),v("li",[t._v("ctx.canvas           只读属性，指向canvas元素")])]),t._v(" "),v("h2",{attrs:{id:"canvas元素的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#canvas元素的方法"}},[t._v("#")]),t._v(" canvas元素的方法")]),t._v(" "),v("ul",[v("li",[t._v("canvas.toDataURL()   type, quality")]),t._v(" "),v("li",[t._v("canvas.toBlob()")])])])}),[],!1,null,null,null);a.default=_.exports}}]);